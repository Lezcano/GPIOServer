#!/usr/bin/perl
#
########################################################################################################################
########################################################################################################################
##
##      Copyright (C) 2020 Peter Walsh, Milford, NH 03055
##      All Rights Reserved under the MIT license as outlined below.
##
##  FILE
##
##      GPIOServer
##
##  DESCRIPTION
##
##      RasPi configuration server
##
##      Accept commands from a web socket and perform that function.
##
##  USAGE
##
##      GPIOServer [-v]
##
##      where:      -v      Verbose: print out things as they happen
##
##      $GPIOConfig->
##          {GPIO#}->'5'
##              {Mode }->Input          # One of:   Input   Output
##              {Logic}->Invert         #           Invert  Normal
##              {Pull }->High           #           High    Low
##              {Boot }->Low            # Value to take at bootup
##              {HName}->"Relay 1"      # Hardware name
##              {UName}->"Keurig"       # User's   assigned name
##              {UDesc}->"Coffee maker in the kitchen"
##
##      The logic will convert keywords to camel case; thus, it is sufficient to
##        say things like "if $GPIO->{Logic} eq "Invert" and expect an exact match.
##
########################################################################################################################
########################################################################################################################
##
##  MIT LICENSE
##
##  Permission is hereby granted, free of charge, to any person obtaining a copy of
##    this software and associated documentation files (the "Software"), to deal in
##    the Software without restriction, including without limitation the rights to
##    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
##    of the Software, and to permit persons to whom the Software is furnished to do
##    so, subject to the following conditions:
##
##  The above copyright notice and this permission notice shall be included in
##    all copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
##    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
##    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
##    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
##    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
##    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
########################################################################################################################
########################################################################################################################

use strict;
use warnings;
use Carp;

our $VERSION = 'GPIOServer2020-10-20';

use RPi::Pin;
use RPi::Const qw(:all);

use JSON;
use Data::Dumper;
use File::Slurp qw(read_file);

use lib "$ENV{HOME}/GPIOServer/lib";

use Site::Process;
use Site::WSServer;
use Site::ParseData;
use Site::RasPiUtils;

########################################################################################################################
########################################################################################################################
##
## Data declarations
##
########################################################################################################################
########################################################################################################################

our $SERVER_PORT = 2021;

our $Server;
our $SysName;
our $GPIOConfig;        # Full description of GPIO block
our $WebInfo;           # Info given to web page

#  #
#  # Comment
#  #
#  AllowRename yes             # Allow user to change UName and UDesc
#
#  GPIO    7
#      Mode=Input              # One of:   Input   Output
#      Logic=Invert            #           Invert  Normal
#      Pull=High               #           High    Low
#      Boot=Low                # Value to take at bootup
#      HName="Relay 1"         # Hardware name
#      UName="Keurig"          # User's   assigned name
#      UDesc="Coffee maker in the kitchen"
#
our $RenameKey = "AllowRename";

our $GPIOConfigFile = "$ENV{HOME}/GPIOServer/etc/GPIO.conf";
our $GPIOMatches = [
    {                     RegEx  => qr/^\s*#/                   ,Action => Site::ParseData::SkipLine    }, # Skip Comments
    { Name => $RenameKey, RegEx  => qr/^\s*AllowRename\s*(\w+)/ ,Action => Site::ParseData::AddGlobal   },
    {                     RegEx  => qr/^\s*GPIO\s*(\d+)/i       ,Action => Site::ParseData::StartSection},
    { Name => "Mode"    , RegEx => qr/^\s*Mode\s*=\s*(\w+)/i    ,Action => Site::ParseData::AddVar      },
    { Name => "Logic"   , RegEx => qr/^\s*Logic\s*=\s*(\w+)/i   ,Action => Site::ParseData::AddVar      },
    { Name => "Pull"    , RegEx => qr/^\s*Pull\s*=\s*(\w+)/i    ,Action => Site::ParseData::AddVar      },
    { Name => "Boot"    , RegEx => qr/^\s*Boot\s*=\s*(\w+)/i    ,Action => Site::ParseData::AddVar      },
    { Name => "HName"   , RegEx => qr/^\s*HName\s*=\s*"(.*)"/i  ,Action => Site::ParseData::AddVar      },
    { Name => "UName"   , RegEx => qr/^\s*UName\s*=\s*"(.*)"/i  ,Action => Site::ParseData::AddVar      },
    { Name => "UDesc"   , RegEx => qr/^\s*UDesc\s*=\s*"(.*)"/i  ,Action => Site::ParseData::AddVar      },
    ];

########################################################################################################################
########################################################################################################################
##
## GPIO server
##
########################################################################################################################
########################################################################################################################

#
# Process command line args.
#
#     -v (verbose) means "print out extra stuff"
#
my $Verbose = 0;

$Verbose = 1
    if defined $ARGV[0] and $ARGV[0] eq "-v";

$GPIOConfig = GetGPIOConfig();
$SysName    = GetHostname();

$WebInfo->{SysName} = $SysName;

# print Data::Dumper->Dump([$WebInfo],["WebInfo"]);
# exit(0);

########################################################################################################################
########################################################################################################################
#
# Setup a web socket and listen for connections.
#
Message("**** GPIOServer: GPIOServer is up and running.")
    if $Verbose;

Message("**** GPIOServer: Waiting for websocket connection")
    if $Verbose;

Site::WSServer::InitWSServer($SERVER_PORT,[],\&WebRequest,\&ConnectionRequest)->start;

exit(1);

########################################################################################################################
########################################################################################################################
#
# ConnectionRequest - Process incoming connection requests
#
# Inputs:      Connection
#              Server
#
# Outputs:     TRUE  if should accept this request
#              FALSE if should reject this request
#
sub ConnectionRequest {

#     kill "USR1",getppid         # Inform server of activity
#         unless $DB::single;     #   (but not if debugging)

    return 1;
    }


########################################################################################################################
########################################################################################################################
# 
#  WebRequest - Process incoming web page requests
# 
#  Inputs:      JSON encoded struct of request
#               Connection
#               Server
# 
#  Outputs:     None
# 
sub WebRequest {
    my $JSONText = shift // "";
    my $Conn     = shift;
    my $Server   = shift;
    
#    kill "USR1",getppid         # Inform server of activity
#        unless $DB::single;     #   (but not if debugging)

    #
    # Lots of error checking for web requests.
    #
    return Message("**** GPIOServer: No Web request")
        unless length $JSONText;

    my $Request = eval{decode_json $JSONText};              # Catches/avoids Croak() in lib function

    return Message("**** GPIOServer: Bad JSON Web request: ($JSONText)")
        unless defined $Request && (ref $Request) eq "HASH";

    $Request->{Type} //= "";
        
    return Message("**** GPIOServer: No request type: ($JSONText)")
        unless length $Request->{Type};

    #
    # GetWebInfo - Return the web GPIO information
    #
    if( $Request->{Type} eq "GetWebInfo" ) {
        $Request->{Error} = "No error.";
        Message("**** GPIOServer: GetWebInfo()")
            if $Verbose;
        GetGPIOValues();
        $Request->{State} = $WebInfo;
        }

    #
    # SetWebInfo - Implement new GPIO user name and comment
    #
    elsif( $Request->{Type} eq "SetWebInfo" ) {
        $Request->{Error} = "No error.";
        Message("**** GPIOServer: SetWebInfo()")
            if $Verbose;
        SetWebInfo($Request->{Arg1},$WebInfo,$Verbose);
        }

    #
    # ToggleGPIO - Change value of GPIO output
    #
    elsif( $Request->{Type} eq "ToggleGPIO" ) {
        Message("**** GPIOServer: ToggleGPIO($Request->{Arg1})")
            if $Verbose;
        $Request->{Error} = ToggleGPIO($Request->{Arg1});
        GetGPIOValues();
        $Request->{State} = $WebInfo;
        }

    #
    # Unknown request type: Return error to caller
    #
    else {
        Message("**** GPIOServer: ConfigServer: Unknown request type ($Request->{Type})")
            if $Verbose;
        }

    #
    # Pack up the error message and return the struct to the caller
    #
    SendResponse($Conn,$Request);
    }


########################################################################################################################
########################################################################################################################
#
# GetGPIOConfig - Set up a local config struct with all the GPIO information.
#
# Inputs:      None.
#
# Outputs:     GPIO info struct
#
sub GetGPIOConfig {

    ####################################################################################################################
    #
    # GPIO information, from config file
    #
    return { Valid => 0 }
        unless -r $GPIOConfigFile;

    my $ConfigFile = Site::ParseData->new(Filename => $GPIOConfigFile, Matches  => $GPIOMatches);
    my $GPIOConfig = $ConfigFile->ParseFile();

    $GPIOConfig->{$RenameKey} = MatchArgs($GPIOConfig->{$RenameKey}, "Yes","No","Global",$RenameKey);
    $GPIOConfig->{Valid} = $ConfigFile->{Parsed};

    $WebInfo = { $RenameKey => $GPIOConfig->{$RenameKey} // "Yes", GPIOInfo => [] };

    foreach my $GPIOID (keys %{$GPIOConfig}) {

        next
            if $GPIOID eq "Valid" or $GPIOID eq $RenameKey;

        ################################################################################################################
        #
        # Do some conversions and simple error checking on the GPIO input file
        #
        # GPIO    3
        #     Mode=Output
        #     Logic=Normal
        #     Pull=High
        #     Boot=Off
        #     HName="Relay U3"
        #     UName="Relay U3"
        #     UDesc=""
        #
        exit Message("**** GPIOServer: GPIO ID ($GPIOID) is not valid number")
            unless $GPIOID =~ /^\d+$/;

        exit Message("**** GPIOServer: GPIO ID ($GPIOID) is out of range")
            unless $GPIOID >= 0 and $GPIOID <= 31;

        my $GPIO = $GPIOConfig->{$GPIOID};

        $GPIO->{ Mode} = MatchArgs($GPIO->{ Mode}, "Input","Output",$GPIOID, "Mode");
        $GPIO->{Logic} = MatchArgs($GPIO->{Logic},"Normal","Invert",$GPIOID,"Logic");
        $GPIO->{ Boot} = MatchArgs($GPIO->{ Boot},   "Off",    "On",$GPIOID, "Boot");

        #
        # Pull takes "High", "Low", or "None".
        #
        if( $GPIO->{Mode} eq "Input" ) {

            $GPIO->{Pull} = "None"
                unless defined $GPIO->{Pull} and length $GPIO->{Pull};

            if( $GPIO->{Pull} =~ /None/i ) { $GPIO->{Pull} = "None"; }
            else { $GPIO->{Pull} = MatchArgs($GPIO->{Pull},  "High",   "Low",$GPIOID, "Pull"); }
            }

        $GPIO->{HName} = "GPIO$GPIOID"
            unless defined $GPIO->{HName} and length $GPIO->{HName};

        $GPIO->{UName} = "GPIO$GPIOID"
            unless defined $GPIO->{UName} and length $GPIO->{UName};

        $GPIO->{UDesc} = "---"
            unless defined $GPIO->{UDesc} and length $GPIO->{UDesc};

        ################################################################################################################
        #
        # Connect to the GPIO in question and get the current value
        #
        my $Device = RPi::Pin->new($GPIOID);

        if( $GPIO->{Mode} eq "Input" ) { 
            $Device->mode(INPUT); 
            if(    $GPIO->{Pull} eq "High" ) { $Device->pull(PUD_UP)  ; }
            elsif( $GPIO->{Pull} eq "Low"  ) { $Device->pull(PUD_DOWN); }
            else                             { $Device->pull(PUD_OFF) ; }
            }
        else                           { 
            #
            # Avoid pathological spike that can happen if we set the mode
            #   before setting the output value.
            #
            if( $GPIO->{Boot} eq "Low" ) { $Device->write(LOW) ; }
            else                         { $Device->write(HIGH); }

            $Device->mode(OUTPUT); 

            if( $GPIO->{Boot} eq "Low" ) { $Device->write(LOW) ; }
            else                         { $Device->write(HIGH); }
            }

        $GPIO->{ Value} = $Device->read();
        $GPIO->{Device} = $Device;

        push @{$WebInfo->{GPIOInfo}},{ UName  => $GPIO->{ UName}, 
                                       UDesc  => $GPIO->{ UDesc}, 
                                       HName  => $GPIO->{ HName}, 
                                       Mode   => $GPIO->{  Mode},
                                       Invert => $GPIO->{Invert},
                                       ID     => $GPIOID };
        }

    return $GPIOConfig;
    }


########################################################################################################################
########################################################################################################################
#
# GetGPIOValues - Read current values for all GPIOs
#
# Inputs:      None.
#
# Outputs:     None. Values are set in place at $WebInfo->{GPIOInfo}
#
sub GetGPIOValues {

    #
    # Run through the existing GPIO list, getting current values
    #
    foreach my $GPIO (@{$WebInfo->{GPIOInfo}}) {
        my $Value = $GPIOConfig->{$GPIO->{ID}}->{Device}->read();

        $Value = 1 - $Value
            if $GPIOConfig->{$GPIO->{ID}}->{Logic} eq "Invert";

        $GPIO->{Value} = $Value ? "On" : "Off";
        }
    }


########################################################################################################################
########################################################################################################################
#
# ToggleGPIO - Toggle value of GPIO
#
# Inputs:      ID of GPIO to toggle
#
# Outputs:     Error msg, or "No error."
#
sub ToggleGPIO {
    my $GPIOID = shift;
    my $Rtnval = "No error.";

    my $GPIO = $GPIOConfig->{$GPIOID};

    if( $GPIO->{Mode} ne "Output" ) {
        Message("**** GPIOServer: Not an output device ($GPIOID)")
            if $Verbose;
        return "Not an output device ($GPIOID)";
        }

    my $Value = $GPIO->{Device}->read();
    $GPIO->{Device}->write(1 - $Value);

    return $Rtnval;
    }


########################################################################################################################
########################################################################################################################
#
# SetWebInfo - Set a new GPIO config
#
# Inputs:      Requested config state
#              Original  config state (for comparison)
#              TRUE if verbose mode
#
# Outputs:     None
#
sub SetWebInfo {
    my $NewInfo  = shift;
    my $OrigInfo = shift;
    my $Verbose  = shift;

    print Data::Dumper->Dump([$NewInfo],["NewInfo"])
        if $Verbose;
    }


########################################################################################################################
########################################################################################################################
#
# MatchArgs - Match a GPIO description with one (of two) arguments
#
# Inputs:      Argument to match        (ex: "Mode")
#              First possible match     (ex: "Input")
#              TRUE if verbose mode     (ex: "Output")
#              GPIO ID this arg applies to         (for error message)
#              Argument name this match applies to (for error message)
#
# Outputs:     The canonical argument that matches (ie: "Input" or "Output", matched case insensitive)
#
# NOTES: If the $Arg is blank or undefined, the 1st match is given as default.
#
sub MatchArgs {
    my $Arg     = shift;
    my $Match1  = shift;
    my $Match2  = shift;
    my $GPIOID  = shift;
    my $ArgName = shift;

    $Arg = $Match1
        unless defined $Arg and length $Arg;

    if   ( $Arg =~ /$Match1/i ) { $Arg = $Match1; }
    elsif( $Arg =~ /$Match2/i ) { $Arg = $Match2; }
    else { exit Message("**** GPIOServer: GPIO ID ($GPIOID) $ArgName is not '$Match1' or '$Match2'"); }

    return $Arg;
    }
